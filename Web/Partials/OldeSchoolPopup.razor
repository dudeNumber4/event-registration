@using EventRegistration.Services
@using EventModels
@using System.Diagnostics
@using System.Linq
@inject SessionService SessionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@*<EditForm />*@

@*Validation for built-in edit form is via annotations*@
<EditForm Model="@session" OnValidSubmit="@HandleValidSubmit">
  <DataAnnotationsValidator />
  <ValidationSummary />
  <div class="container">
    <div class="row">
      <label for="title" class="col">Title</label>
      <InputText id="title" @bind-Value="@session.Title" class="col" />
    </div>
    <div class="row">
      <label for="description" class="col">Description</label>
      <InputText id="description" @bind-Value="@session.Description" class="col" />
    </div>
    <div class="row">
      <label for="day" class="col">Day</label>
      <DaySelect Session="session" />
    </div>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
    <button type="submit" class="btn btn-primary">Save</button>
  </div>
</EditForm>

@code {
  private Session session = null; // must get from service

  protected override async Task OnInitializedAsync()
  {
    Debug.Print(nameof(OnInitializedAsync));
    session = (await SessionService.GetAllSessions()).FirstOrDefault() ?? new Session { Title = "There were no sessions!" };
  }

  private async Task HandleValidSubmit()
  {
    Debug.Print($"{nameof(OldeSchoolPopup)}.{nameof(HandleValidSubmit)}");
    await SessionService.EditSession(session);
    await JSRuntime.InvokeVoidAsync("JSInterop.popEditSession", false);
    NavigationManager.NavigateTo("sessions", true); // true: force refresh
  }
}

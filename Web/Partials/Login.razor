@page "/login"
@using System.Diagnostics
@using EventRegistration.Services
@using EventRegistration.ViewModels
@inject RegistrantService RegistrantService
@inject NavigationManager NavigationManager

@*I couldn't get the built in validation components to work here*@
<EditForm class="form-group" Model="model">
    @*RESUME: put these controls into a grid, then resume lower if model valid*@
    @*<ValidationMessage For="@(() => model.ValidationMsg)" />*@
    <label for="exampleInputEmail1">Email address</label>
    <InputText id="email" type="email" class="form-control" placeholder="Enter email" @bind-Value="model.Email"></InputText>
    <br />
    <button class="btn btn-primary" @onclick="@(() => LoginYo())">Submit</button>
    @if (!string.IsNullOrEmpty(model.ValidationMsg))
    {
        <div class="alert alert-warning" role="alert">
            @model.ValidationMsg
        </div>
    }
</EditForm>

@code {
    private LoginViewModel model;
    //private EditContext editContext;

    void LoginYo()
    {
        if (model.Valid())
        {
            Debug.Print("found");
            //NavigationManager.NavigateTo($"sessions/{sessionId}");
        }
        else
        {
            model.ValidationMsg = "Registration not found.";
        }
    }

    protected override void OnInitialized()
    {
        model = new(RegistrantService);
        //editContext = new(model);
    }
}
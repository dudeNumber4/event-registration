@using EventRegistration.Services
@using EventRegistration.ViewModels
@using EventModels
@using System.Diagnostics
@inject RegistrationService RegistrationService
@inject SessionService SessionService

@if (sessions == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <h6>Available Sessions</h6>
  <hr />

  <div class="container">
    <div class="row font-weight-bold">
      <div class="col">
        Day
      </div>
      <div class="col">
        Title
      </div>
      <div class="col">
        Description
      </div>
      <div class="col">
        &nbsp;
      </div>
    </div>
  </div>

  <div class="container">
    @foreach (var session in sessions)
    {
      <div class="row mt-1">
        <div class="col">
          @session.Day
        </div>
        <div class="col">
          @session.Title
        </div>
        <div class="col">
          @session.Description
        </div>
        <div class="col">
          <button @onclick="@(() => OnAdd.InvokeAsync(session.Id))" class="btn btn-primary btn-sm">Add</button>
        </div>
      </div>
    }
  </div>

}

@code {

    private SessionList sessions = null;
    private SelectSessionsViewModel model;

    [CascadingParameter]
    public string RegistrationId { get; set; }

    [Parameter] 
    public EventCallback<int> OnAdd { get; set; }

    public void Refresh()
    {
      sessions = model.PopulateSessions(RegistrationId);
    }

    protected override void OnInitialized()
    {
      model = new SelectSessionsViewModel(RegistrationService, SessionService);
      sessions = model.PopulateSessions(RegistrationId);
    }

}

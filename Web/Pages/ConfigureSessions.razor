@page "/sessions"
@using EventRegistration.Services
@using EventModels
@using EventRegistration.Shared
@inject SessionService SessionService
@inject NavigationManager NavigationManager

@if (sessions == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <h3>Sessions</h3>
  <table class="table">
    <thead>
      <tr>
        <th></th>
        <th>Day</th>
        <th>Title</th>
        <th>Description</th>
        <th>Edit</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var session in sessions)
      {
        <tr>
          <td><button class="btn btn-primary" @onclick="e => DeleteSession(e, session.Id)">Delete Session</button></td>
          <td>@session.Day</td>
          <td>@session.Title</td>
          <td>@session.Description</td>
          <td><button @onclick="@(() => EditSession(session.Id))" class="btn btn-primary">Edit</button></td>
        </tr>
      }
    </tbody>
  </table>
  <div>
    <span><button class="btn btn-primary" @onclick="DeleteAll">Delete all Sessions</button></span>
    &nbsp;
    <span><button class="btn btn-primary" @onclick="Add">Add Session</button></span>
  </div>
}

@code {

    List<Session> sessions;
    //int editSessionId = 0;

    protected override void OnInitialized()
    {
      LoadSessions(true);
    }

    void DeleteAll(MouseEventArgs e)
    {
      SessionService.DeleteAllSessions();
      LoadSessions(false);
    }

    void EditSession(int sessionId)
    {
      NavigationManager.NavigateTo($"sessions/{sessionId}");
    }

    void DeleteSession(MouseEventArgs e, int id)
    {
      SessionService.DeleteSession(id);
      // Each time I call this, the UI updates diff (implicit binding without declaring anything).
      // This happens for free with data held in DI services.
      LoadSessions(false);
    }

    void LoadSessions(bool createNew = true)
    {
      sessions = SessionService.GetAllSessions(createNew);
    }

    void Add(MouseEventArgs args)
    {
      NavigationManager.NavigateTo($"sessions/add");
    }

}

@page "/edit-registration/{RegistrationId}"
@using EventRegistration.ViewModels
@using EventRegistration.Services
@inject RegistrationService RegistrationService
@inject RegistrantService RegistrantService
@inject NavigationManager NavigationManager

<div class="alert alert-primary">Edit Registration for @registrantName</div>
<div class="container-fluid">
  <div class="row">
    <div class="col">
      <CascadingValue Value="RegistrationId">
        <SelectSessions OnAdd="AddSessionHandler" @ref="selectSessionsComponent" />
      </CascadingValue>
    </div>
    <div class="col">
      <CascadingValue Value="RegistrationId">
        <SelectedSessions OnRemove="RemoveSessionHandler" @ref="selectedSessionsComponent" />
      </CascadingValue>
    </div>
  </div>
</div>
<div class="container-fluid content">
  <div class="row">
    <div class="col-11">
    </div>
    <div class="col-1">
      <button type="button" class="btn btn-primary" @onclick="@(() => Confirm())">Confirm</button>
    </div>
  </div>
</div>

@code {
    private EditRegistrationViewModel model;
    private string registrantName = string.Empty;
    protected SelectSessions selectSessionsComponent;
    protected SelectedSessions selectedSessionsComponent;

    [Parameter]
    public string RegistrationId { get; set; }

    // no validation necessary
    void Confirm() => NavigationManager.NavigateTo($"itinerary/{model.Registration.Id}");

    protected override void OnInitialized()
    {
      model = EditRegistrationViewModel.Create(RegistrationService, RegistrantService, RegistrationId);
      registrantName = model.RegistrantName(RegistrantService);
    }

    void AddSessionHandler(int sessionId)
    {
      model.AddSession(sessionId);
      RefreshChildren();
    }

    void RemoveSessionHandler(int sessionId)
    {
      model.RemoveSession(sessionId);
      RefreshChildren();
    }

    void RefreshChildren()
    {
      selectSessionsComponent.Refresh();
      selectedSessionsComponent.Refresh();
    }
}

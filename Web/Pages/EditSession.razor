@page "/sessions/{SessionId}"
@using EventRegistration.Services
@using EventModels
@using EventRegistration.ViewModels
@inject SessionService SessionService
@inject NavigationManager NavigationManager

@if (session == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <EditForm Model="@session" OnValidSubmit="@HandleValidSubmit">
    @*Validation for built-in edit form is via annotations*@
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
      <div class="row">
        <h3 class="col-sm-10">Behold: the session edit component.</h3>
      </div>
      <div class="row">
        <label for="title" class="col-sm-4">Title</label>
        <InputText id="title" @bind-Value="@session.Title" class="col-sm-4" />
      </div>
      <div class="row">
        <label for="description" class="col-sm-4">Description</label>
        <InputText id="description" @bind-Value="@session.Description" class="col-sm-4" />
      </div>
      <div class="row">
        <label for="dayselect" class="col-sm-4">Day</label>
        <DaySelect Session="session" />
      </div>
    </div>
    <div class="row">
      <div class="col-sm-2">&nbsp;</div> @*<-- Because I can't figure bootstrap grid system out*@
      <button type="submit" class="col-sm-1">Submit</button>
    </div>
  </EditForm>
}

@code {
    private EditSessionViewModel model;

    private Session session = null;

    [Parameter] // means it's passed on URL.
    public string SessionId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model = await EditSessionViewModel.CreateAsync(SessionService, SessionId);
        session = model.Session;
    }

    private async Task HandleValidSubmit()
    {
        await model.Submit();
        NavigationManager.NavigateTo("sessions", true); // true: force refresh
    }
}
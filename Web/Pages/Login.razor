@page "/login"
@using EventRegistration.Services
@using EventRegistration.ViewModels
@inject RegistrantService RegistrantService
@inject RegistrationService RegistrationService
@inject NavigationManager NavigationManager
@*I couldn't get the built in validation components to work here*@
<EditForm class="form-group" Model="model">
  @*<ValidationMessage For="@(() => model.ValidationMsg)" />*@
  <div class="container">
    <div class="row row-padding">
      <label for="exampleInputEmail1">Email address</label>
      <InputText id="email" type="email" class="form-control" placeholder="Enter email" @bind-Value="model.Email"></InputText>
    </div>
    <div class="row row-padding">
      <button class="btn btn-primary" @onclick="@(() => LoginYo())">Submit</button>
    </div>
    <div class="row row-padding">
      @if (!string.IsNullOrEmpty(model.ValidationMsg))
      {
        <div class="alert alert-warning" role="alert">
          @model.ValidationMsg
        </div>
      }
    </div>
  </div>
</EditForm>

@code {
    private LoginViewModel model;
    //private EditContext editContext;

    void LoginYo()
    {
      if (model.RegistrantExists())
      {
        if (!model.RegistrationExists())
          model.CreateRegistration(model.Registrant.Id);
        //if (model.SessionsExist())
        //  NavigationManager.NavigateTo($"itinerary/{model.Registration.Id}");
        //else
        NavigationManager.NavigateTo($"edit-registration/{model.Registration.Id}");
      }
      else
      {
        model.ValidationMsg = "Registrant not found.";
      }
    }

    protected override void OnInitialized()
    {
      model = new(RegistrantService, RegistrationService);
      //editContext = new(model);
    }
}